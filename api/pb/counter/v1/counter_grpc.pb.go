// Additional request and response messages...

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: counter/v1/counter.proto

package counter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CounterService_CreateCounter_FullMethodName    = "/main.CounterService/CreateCounter"
	CounterService_GetCounters_FullMethodName      = "/main.CounterService/GetCounters"
	CounterService_IncrementCounter_FullMethodName = "/main.CounterService/IncrementCounter"
	CounterService_DeleteCounter_FullMethodName    = "/main.CounterService/DeleteCounter"
	CounterService_GetEvents_FullMethodName        = "/main.CounterService/GetEvents"
)

// CounterServiceClient is the client API for CounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterServiceClient interface {
	CreateCounter(ctx context.Context, in *CreateCounterRequest, opts ...grpc.CallOption) (*CreateCounterResponse, error)
	GetCounters(ctx context.Context, in *GetCountersRequest, opts ...grpc.CallOption) (*GetCountersResponse, error)
	IncrementCounter(ctx context.Context, in *IncrementCounterRequest, opts ...grpc.CallOption) (*IncrementCounterResponse, error)
	DeleteCounter(ctx context.Context, in *DeleteCounterRequest, opts ...grpc.CallOption) (*DeleteCounterResponse, error)
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
}

type counterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterServiceClient(cc grpc.ClientConnInterface) CounterServiceClient {
	return &counterServiceClient{cc}
}

func (c *counterServiceClient) CreateCounter(ctx context.Context, in *CreateCounterRequest, opts ...grpc.CallOption) (*CreateCounterResponse, error) {
	out := new(CreateCounterResponse)
	err := c.cc.Invoke(ctx, CounterService_CreateCounter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) GetCounters(ctx context.Context, in *GetCountersRequest, opts ...grpc.CallOption) (*GetCountersResponse, error) {
	out := new(GetCountersResponse)
	err := c.cc.Invoke(ctx, CounterService_GetCounters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) IncrementCounter(ctx context.Context, in *IncrementCounterRequest, opts ...grpc.CallOption) (*IncrementCounterResponse, error) {
	out := new(IncrementCounterResponse)
	err := c.cc.Invoke(ctx, CounterService_IncrementCounter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) DeleteCounter(ctx context.Context, in *DeleteCounterRequest, opts ...grpc.CallOption) (*DeleteCounterResponse, error) {
	out := new(DeleteCounterResponse)
	err := c.cc.Invoke(ctx, CounterService_DeleteCounter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, CounterService_GetEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServiceServer is the server API for CounterService service.
// All implementations must embed UnimplementedCounterServiceServer
// for forward compatibility
type CounterServiceServer interface {
	CreateCounter(context.Context, *CreateCounterRequest) (*CreateCounterResponse, error)
	GetCounters(context.Context, *GetCountersRequest) (*GetCountersResponse, error)
	IncrementCounter(context.Context, *IncrementCounterRequest) (*IncrementCounterResponse, error)
	DeleteCounter(context.Context, *DeleteCounterRequest) (*DeleteCounterResponse, error)
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	mustEmbedUnimplementedCounterServiceServer()
}

// UnimplementedCounterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCounterServiceServer struct {
}

func (UnimplementedCounterServiceServer) CreateCounter(context.Context, *CreateCounterRequest) (*CreateCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCounter not implemented")
}
func (UnimplementedCounterServiceServer) GetCounters(context.Context, *GetCountersRequest) (*GetCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (UnimplementedCounterServiceServer) IncrementCounter(context.Context, *IncrementCounterRequest) (*IncrementCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementCounter not implemented")
}
func (UnimplementedCounterServiceServer) DeleteCounter(context.Context, *DeleteCounterRequest) (*DeleteCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCounter not implemented")
}
func (UnimplementedCounterServiceServer) GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedCounterServiceServer) mustEmbedUnimplementedCounterServiceServer() {}

// UnsafeCounterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServiceServer will
// result in compilation errors.
type UnsafeCounterServiceServer interface {
	mustEmbedUnimplementedCounterServiceServer()
}

func RegisterCounterServiceServer(s grpc.ServiceRegistrar, srv CounterServiceServer) {
	s.RegisterService(&CounterService_ServiceDesc, srv)
}

func _CounterService_CreateCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).CreateCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_CreateCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).CreateCounter(ctx, req.(*CreateCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_GetCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).GetCounters(ctx, req.(*GetCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_IncrementCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).IncrementCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_IncrementCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).IncrementCounter(ctx, req.(*IncrementCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_DeleteCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).DeleteCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_DeleteCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).DeleteCounter(ctx, req.(*DeleteCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_GetEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CounterService_ServiceDesc is the grpc.ServiceDesc for CounterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CounterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.CounterService",
	HandlerType: (*CounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCounter",
			Handler:    _CounterService_CreateCounter_Handler,
		},
		{
			MethodName: "GetCounters",
			Handler:    _CounterService_GetCounters_Handler,
		},
		{
			MethodName: "IncrementCounter",
			Handler:    _CounterService_IncrementCounter_Handler,
		},
		{
			MethodName: "DeleteCounter",
			Handler:    _CounterService_DeleteCounter_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _CounterService_GetEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter/v1/counter.proto",
}
