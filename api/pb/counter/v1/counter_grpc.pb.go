// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: counter/v1/counter.proto

package counter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CounterService_Create_FullMethodName    = "/counter.v1.CounterService/Create"
	CounterService_Get_FullMethodName       = "/counter.v1.CounterService/Get"
	CounterService_List_FullMethodName      = "/counter.v1.CounterService/List"
	CounterService_Increment_FullMethodName = "/counter.v1.CounterService/Increment"
	CounterService_Delete_FullMethodName    = "/counter.v1.CounterService/Delete"
)

// CounterServiceClient is the client API for CounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterServiceClient interface {
	Create(ctx context.Context, in *CounterServiceCreateRequest, opts ...grpc.CallOption) (*CounterServiceCreateResponse, error)
	Get(ctx context.Context, in *CounterServiceGetRequest, opts ...grpc.CallOption) (*CounterServiceGetResponse, error)
	List(ctx context.Context, in *CounterServiceListRequest, opts ...grpc.CallOption) (*CounterServiceListResponse, error)
	Increment(ctx context.Context, in *CounterServiceIncrementRequest, opts ...grpc.CallOption) (*CounterServiceIncrementResponse, error)
	Delete(ctx context.Context, in *CounterServiceDeleteRequest, opts ...grpc.CallOption) (*CounterServiceDeleteResponse, error)
}

type counterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterServiceClient(cc grpc.ClientConnInterface) CounterServiceClient {
	return &counterServiceClient{cc}
}

func (c *counterServiceClient) Create(ctx context.Context, in *CounterServiceCreateRequest, opts ...grpc.CallOption) (*CounterServiceCreateResponse, error) {
	out := new(CounterServiceCreateResponse)
	err := c.cc.Invoke(ctx, CounterService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) Get(ctx context.Context, in *CounterServiceGetRequest, opts ...grpc.CallOption) (*CounterServiceGetResponse, error) {
	out := new(CounterServiceGetResponse)
	err := c.cc.Invoke(ctx, CounterService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) List(ctx context.Context, in *CounterServiceListRequest, opts ...grpc.CallOption) (*CounterServiceListResponse, error) {
	out := new(CounterServiceListResponse)
	err := c.cc.Invoke(ctx, CounterService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) Increment(ctx context.Context, in *CounterServiceIncrementRequest, opts ...grpc.CallOption) (*CounterServiceIncrementResponse, error) {
	out := new(CounterServiceIncrementResponse)
	err := c.cc.Invoke(ctx, CounterService_Increment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) Delete(ctx context.Context, in *CounterServiceDeleteRequest, opts ...grpc.CallOption) (*CounterServiceDeleteResponse, error) {
	out := new(CounterServiceDeleteResponse)
	err := c.cc.Invoke(ctx, CounterService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServiceServer is the server API for CounterService service.
// All implementations must embed UnimplementedCounterServiceServer
// for forward compatibility
type CounterServiceServer interface {
	Create(context.Context, *CounterServiceCreateRequest) (*CounterServiceCreateResponse, error)
	Get(context.Context, *CounterServiceGetRequest) (*CounterServiceGetResponse, error)
	List(context.Context, *CounterServiceListRequest) (*CounterServiceListResponse, error)
	Increment(context.Context, *CounterServiceIncrementRequest) (*CounterServiceIncrementResponse, error)
	Delete(context.Context, *CounterServiceDeleteRequest) (*CounterServiceDeleteResponse, error)
	mustEmbedUnimplementedCounterServiceServer()
}

// UnimplementedCounterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCounterServiceServer struct {
}

func (UnimplementedCounterServiceServer) Create(context.Context, *CounterServiceCreateRequest) (*CounterServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCounterServiceServer) Get(context.Context, *CounterServiceGetRequest) (*CounterServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCounterServiceServer) List(context.Context, *CounterServiceListRequest) (*CounterServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCounterServiceServer) Increment(context.Context, *CounterServiceIncrementRequest) (*CounterServiceIncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedCounterServiceServer) Delete(context.Context, *CounterServiceDeleteRequest) (*CounterServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCounterServiceServer) mustEmbedUnimplementedCounterServiceServer() {}

// UnsafeCounterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServiceServer will
// result in compilation errors.
type UnsafeCounterServiceServer interface {
	mustEmbedUnimplementedCounterServiceServer()
}

func RegisterCounterServiceServer(s grpc.ServiceRegistrar, srv CounterServiceServer) {
	s.RegisterService(&CounterService_ServiceDesc, srv)
}

func _CounterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Create(ctx, req.(*CounterServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Get(ctx, req.(*CounterServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).List(ctx, req.(*CounterServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterServiceIncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_Increment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Increment(ctx, req.(*CounterServiceIncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).Delete(ctx, req.(*CounterServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CounterService_ServiceDesc is the grpc.ServiceDesc for CounterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CounterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counter.v1.CounterService",
	HandlerType: (*CounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CounterService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CounterService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CounterService_List_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _CounterService_Increment_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CounterService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter/v1/counter.proto",
}
