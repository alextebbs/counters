// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "event/v1/event.proto" (package "event.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EventService } from "./event";
import type { EventServiceListResponse } from "./event";
import type { EventServiceListRequest } from "./event";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EventServiceGetResponse } from "./event";
import type { EventServiceGetRequest } from "./event";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service event.v1.EventService
 */
export interface IEventServiceClient {
    /**
     * Get a single event by ID
     *
     * @generated from protobuf rpc: Get(event.v1.EventServiceGetRequest) returns (event.v1.EventServiceGetResponse);
     */
    get(input: EventServiceGetRequest, options?: RpcOptions): UnaryCall<EventServiceGetRequest, EventServiceGetResponse>;
    /**
     * List all events associated with a counter ID
     *
     * @generated from protobuf rpc: List(event.v1.EventServiceListRequest) returns (event.v1.EventServiceListResponse);
     */
    list(input: EventServiceListRequest, options?: RpcOptions): UnaryCall<EventServiceListRequest, EventServiceListResponse>;
}
/**
 * @generated from protobuf service event.v1.EventService
 */
export class EventServiceClient implements IEventServiceClient, ServiceInfo {
    typeName = EventService.typeName;
    methods = EventService.methods;
    options = EventService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get a single event by ID
     *
     * @generated from protobuf rpc: Get(event.v1.EventServiceGetRequest) returns (event.v1.EventServiceGetResponse);
     */
    get(input: EventServiceGetRequest, options?: RpcOptions): UnaryCall<EventServiceGetRequest, EventServiceGetResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EventServiceGetRequest, EventServiceGetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * List all events associated with a counter ID
     *
     * @generated from protobuf rpc: List(event.v1.EventServiceListRequest) returns (event.v1.EventServiceListResponse);
     */
    list(input: EventServiceListRequest, options?: RpcOptions): UnaryCall<EventServiceListRequest, EventServiceListResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EventServiceListRequest, EventServiceListResponse>("unary", this._transport, method, opt, input);
    }
}
