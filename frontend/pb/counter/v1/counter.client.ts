// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "counter/v1/counter.proto" (package "main", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CounterService } from "./counter";
import type { GetEventsResponse } from "./counter";
import type { GetEventsRequest } from "./counter";
import type { DeleteCounterResponse } from "./counter";
import type { DeleteCounterRequest } from "./counter";
import type { IncrementCounterResponse } from "./counter";
import type { IncrementCounterRequest } from "./counter";
import type { GetCountersResponse } from "./counter";
import type { GetCountersRequest } from "./counter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateCounterResponse } from "./counter";
import type { CreateCounterRequest } from "./counter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The service
 *
 * @generated from protobuf service main.CounterService
 */
export interface ICounterServiceClient {
    /**
     * @generated from protobuf rpc: CreateCounter(main.CreateCounterRequest) returns (main.CreateCounterResponse);
     */
    createCounter(input: CreateCounterRequest, options?: RpcOptions): UnaryCall<CreateCounterRequest, CreateCounterResponse>;
    /**
     * @generated from protobuf rpc: GetCounters(main.GetCountersRequest) returns (main.GetCountersResponse);
     */
    getCounters(input: GetCountersRequest, options?: RpcOptions): UnaryCall<GetCountersRequest, GetCountersResponse>;
    /**
     * @generated from protobuf rpc: IncrementCounter(main.IncrementCounterRequest) returns (main.IncrementCounterResponse);
     */
    incrementCounter(input: IncrementCounterRequest, options?: RpcOptions): UnaryCall<IncrementCounterRequest, IncrementCounterResponse>;
    /**
     * @generated from protobuf rpc: DeleteCounter(main.DeleteCounterRequest) returns (main.DeleteCounterResponse);
     */
    deleteCounter(input: DeleteCounterRequest, options?: RpcOptions): UnaryCall<DeleteCounterRequest, DeleteCounterResponse>;
    /**
     * @generated from protobuf rpc: GetEvents(main.GetEventsRequest) returns (main.GetEventsResponse);
     */
    getEvents(input: GetEventsRequest, options?: RpcOptions): UnaryCall<GetEventsRequest, GetEventsResponse>;
}
/**
 * The service
 *
 * @generated from protobuf service main.CounterService
 */
export class CounterServiceClient implements ICounterServiceClient, ServiceInfo {
    typeName = CounterService.typeName;
    methods = CounterService.methods;
    options = CounterService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateCounter(main.CreateCounterRequest) returns (main.CreateCounterResponse);
     */
    createCounter(input: CreateCounterRequest, options?: RpcOptions): UnaryCall<CreateCounterRequest, CreateCounterResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateCounterRequest, CreateCounterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCounters(main.GetCountersRequest) returns (main.GetCountersResponse);
     */
    getCounters(input: GetCountersRequest, options?: RpcOptions): UnaryCall<GetCountersRequest, GetCountersResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCountersRequest, GetCountersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IncrementCounter(main.IncrementCounterRequest) returns (main.IncrementCounterResponse);
     */
    incrementCounter(input: IncrementCounterRequest, options?: RpcOptions): UnaryCall<IncrementCounterRequest, IncrementCounterResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<IncrementCounterRequest, IncrementCounterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteCounter(main.DeleteCounterRequest) returns (main.DeleteCounterResponse);
     */
    deleteCounter(input: DeleteCounterRequest, options?: RpcOptions): UnaryCall<DeleteCounterRequest, DeleteCounterResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCounterRequest, DeleteCounterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetEvents(main.GetEventsRequest) returns (main.GetEventsResponse);
     */
    getEvents(input: GetEventsRequest, options?: RpcOptions): UnaryCall<GetEventsRequest, GetEventsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEventsRequest, GetEventsResponse>("unary", this._transport, method, opt, input);
    }
}
