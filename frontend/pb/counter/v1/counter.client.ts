// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "counter/v1/counter.proto" (package "counter.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CounterService } from "./counter";
import type { CounterServiceDeleteResponse } from "./counter";
import type { CounterServiceDeleteRequest } from "./counter";
import type { CounterServiceIncrementResponse } from "./counter";
import type { CounterServiceIncrementRequest } from "./counter";
import type { CounterServiceListResponse } from "./counter";
import type { CounterServiceListRequest } from "./counter";
import type { CounterServiceGetResponse } from "./counter";
import type { CounterServiceGetRequest } from "./counter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CounterServiceCreateResponse } from "./counter";
import type { CounterServiceCreateRequest } from "./counter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service counter.v1.CounterService
 */
export interface ICounterServiceClient {
    /**
     * @generated from protobuf rpc: Create(counter.v1.CounterServiceCreateRequest) returns (counter.v1.CounterServiceCreateResponse);
     */
    create(input: CounterServiceCreateRequest, options?: RpcOptions): UnaryCall<CounterServiceCreateRequest, CounterServiceCreateResponse>;
    /**
     * @generated from protobuf rpc: Get(counter.v1.CounterServiceGetRequest) returns (counter.v1.CounterServiceGetResponse);
     */
    get(input: CounterServiceGetRequest, options?: RpcOptions): UnaryCall<CounterServiceGetRequest, CounterServiceGetResponse>;
    /**
     * @generated from protobuf rpc: List(counter.v1.CounterServiceListRequest) returns (counter.v1.CounterServiceListResponse);
     */
    list(input: CounterServiceListRequest, options?: RpcOptions): UnaryCall<CounterServiceListRequest, CounterServiceListResponse>;
    /**
     * @generated from protobuf rpc: Increment(counter.v1.CounterServiceIncrementRequest) returns (counter.v1.CounterServiceIncrementResponse);
     */
    increment(input: CounterServiceIncrementRequest, options?: RpcOptions): UnaryCall<CounterServiceIncrementRequest, CounterServiceIncrementResponse>;
    /**
     * @generated from protobuf rpc: Delete(counter.v1.CounterServiceDeleteRequest) returns (counter.v1.CounterServiceDeleteResponse);
     */
    delete(input: CounterServiceDeleteRequest, options?: RpcOptions): UnaryCall<CounterServiceDeleteRequest, CounterServiceDeleteResponse>;
}
/**
 * @generated from protobuf service counter.v1.CounterService
 */
export class CounterServiceClient implements ICounterServiceClient, ServiceInfo {
    typeName = CounterService.typeName;
    methods = CounterService.methods;
    options = CounterService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Create(counter.v1.CounterServiceCreateRequest) returns (counter.v1.CounterServiceCreateResponse);
     */
    create(input: CounterServiceCreateRequest, options?: RpcOptions): UnaryCall<CounterServiceCreateRequest, CounterServiceCreateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CounterServiceCreateRequest, CounterServiceCreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Get(counter.v1.CounterServiceGetRequest) returns (counter.v1.CounterServiceGetResponse);
     */
    get(input: CounterServiceGetRequest, options?: RpcOptions): UnaryCall<CounterServiceGetRequest, CounterServiceGetResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CounterServiceGetRequest, CounterServiceGetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: List(counter.v1.CounterServiceListRequest) returns (counter.v1.CounterServiceListResponse);
     */
    list(input: CounterServiceListRequest, options?: RpcOptions): UnaryCall<CounterServiceListRequest, CounterServiceListResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CounterServiceListRequest, CounterServiceListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Increment(counter.v1.CounterServiceIncrementRequest) returns (counter.v1.CounterServiceIncrementResponse);
     */
    increment(input: CounterServiceIncrementRequest, options?: RpcOptions): UnaryCall<CounterServiceIncrementRequest, CounterServiceIncrementResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CounterServiceIncrementRequest, CounterServiceIncrementResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(counter.v1.CounterServiceDeleteRequest) returns (counter.v1.CounterServiceDeleteResponse);
     */
    delete(input: CounterServiceDeleteRequest, options?: RpcOptions): UnaryCall<CounterServiceDeleteRequest, CounterServiceDeleteResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CounterServiceDeleteRequest, CounterServiceDeleteResponse>("unary", this._transport, method, opt, input);
    }
}
