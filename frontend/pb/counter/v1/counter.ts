// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "counter/v1/counter.proto" (package "counter.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Event } from "../../event/v1/event";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message counter.v1.Counter
 */
export interface Counter {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: int32 count = 3;
     */
    count: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 4;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message counter.v1.CounterServiceCreateRequest
 */
export interface CounterServiceCreateRequest {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string event_title = 2;
     */
    eventTitle: string;
}
/**
 * @generated from protobuf message counter.v1.CounterServiceCreateResponse
 */
export interface CounterServiceCreateResponse {
    /**
     * @generated from protobuf field: counter.v1.Counter counter = 1;
     */
    counter?: Counter;
}
/**
 * @generated from protobuf message counter.v1.CounterServiceGetRequest
 */
export interface CounterServiceGetRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // Optional: Specify an ID to get a specific counter
}
/**
 * @generated from protobuf message counter.v1.CounterServiceGetResponse
 */
export interface CounterServiceGetResponse {
    /**
     * @generated from protobuf field: counter.v1.Counter counter = 1;
     */
    counter?: Counter;
}
/**
 * @generated from protobuf message counter.v1.CounterServiceListRequest
 */
export interface CounterServiceListRequest {
}
/**
 * @generated from protobuf message counter.v1.CounterServiceListResponse
 */
export interface CounterServiceListResponse {
    /**
     * @generated from protobuf field: repeated counter.v1.Counter counters = 1;
     */
    counters: Counter[];
}
/**
 * @generated from protobuf message counter.v1.CounterServiceIncrementRequest
 */
export interface CounterServiceIncrementRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
}
/**
 * @generated from protobuf message counter.v1.CounterServiceIncrementResponse
 */
export interface CounterServiceIncrementResponse {
    /**
     * @generated from protobuf field: event.v1.Event event = 1;
     */
    event?: Event;
    /**
     * @generated from protobuf field: counter.v1.Counter counter = 2;
     */
    counter?: Counter;
}
/**
 * @generated from protobuf message counter.v1.CounterServiceDeleteRequest
 */
export interface CounterServiceDeleteRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message counter.v1.CounterServiceDeleteResponse
 */
export interface CounterServiceDeleteResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Counter$Type extends MessageType<Counter> {
    constructor() {
        super("counter.v1.Counter", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Counter>): Counter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.title = "";
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<Counter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Counter): Counter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int32 count */ 3:
                    message.count = reader.int32();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 4:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Counter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int32 count = 3; */
        if (message.count !== 0)
            writer.tag(3, WireType.Varint).int32(message.count);
        /* google.protobuf.Timestamp timestamp = 4; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.Counter
 */
export const Counter = new Counter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceCreateRequest$Type extends MessageType<CounterServiceCreateRequest> {
    constructor() {
        super("counter.v1.CounterServiceCreateRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "event_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CounterServiceCreateRequest>): CounterServiceCreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.eventTitle = "";
        if (value !== undefined)
            reflectionMergePartial<CounterServiceCreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceCreateRequest): CounterServiceCreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string event_title */ 2:
                    message.eventTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceCreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string event_title = 2; */
        if (message.eventTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceCreateRequest
 */
export const CounterServiceCreateRequest = new CounterServiceCreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceCreateResponse$Type extends MessageType<CounterServiceCreateResponse> {
    constructor() {
        super("counter.v1.CounterServiceCreateResponse", [
            { no: 1, name: "counter", kind: "message", T: () => Counter }
        ]);
    }
    create(value?: PartialMessage<CounterServiceCreateResponse>): CounterServiceCreateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CounterServiceCreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceCreateResponse): CounterServiceCreateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* counter.v1.Counter counter */ 1:
                    message.counter = Counter.internalBinaryRead(reader, reader.uint32(), options, message.counter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceCreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* counter.v1.Counter counter = 1; */
        if (message.counter)
            Counter.internalBinaryWrite(message.counter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceCreateResponse
 */
export const CounterServiceCreateResponse = new CounterServiceCreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceGetRequest$Type extends MessageType<CounterServiceGetRequest> {
    constructor() {
        super("counter.v1.CounterServiceGetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CounterServiceGetRequest>): CounterServiceGetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CounterServiceGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceGetRequest): CounterServiceGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceGetRequest
 */
export const CounterServiceGetRequest = new CounterServiceGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceGetResponse$Type extends MessageType<CounterServiceGetResponse> {
    constructor() {
        super("counter.v1.CounterServiceGetResponse", [
            { no: 1, name: "counter", kind: "message", T: () => Counter }
        ]);
    }
    create(value?: PartialMessage<CounterServiceGetResponse>): CounterServiceGetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CounterServiceGetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceGetResponse): CounterServiceGetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* counter.v1.Counter counter */ 1:
                    message.counter = Counter.internalBinaryRead(reader, reader.uint32(), options, message.counter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceGetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* counter.v1.Counter counter = 1; */
        if (message.counter)
            Counter.internalBinaryWrite(message.counter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceGetResponse
 */
export const CounterServiceGetResponse = new CounterServiceGetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceListRequest$Type extends MessageType<CounterServiceListRequest> {
    constructor() {
        super("counter.v1.CounterServiceListRequest", []);
    }
    create(value?: PartialMessage<CounterServiceListRequest>): CounterServiceListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CounterServiceListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceListRequest): CounterServiceListRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CounterServiceListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceListRequest
 */
export const CounterServiceListRequest = new CounterServiceListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceListResponse$Type extends MessageType<CounterServiceListResponse> {
    constructor() {
        super("counter.v1.CounterServiceListResponse", [
            { no: 1, name: "counters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Counter }
        ]);
    }
    create(value?: PartialMessage<CounterServiceListResponse>): CounterServiceListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.counters = [];
        if (value !== undefined)
            reflectionMergePartial<CounterServiceListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceListResponse): CounterServiceListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated counter.v1.Counter counters */ 1:
                    message.counters.push(Counter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated counter.v1.Counter counters = 1; */
        for (let i = 0; i < message.counters.length; i++)
            Counter.internalBinaryWrite(message.counters[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceListResponse
 */
export const CounterServiceListResponse = new CounterServiceListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceIncrementRequest$Type extends MessageType<CounterServiceIncrementRequest> {
    constructor() {
        super("counter.v1.CounterServiceIncrementRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CounterServiceIncrementRequest>): CounterServiceIncrementRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<CounterServiceIncrementRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceIncrementRequest): CounterServiceIncrementRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceIncrementRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceIncrementRequest
 */
export const CounterServiceIncrementRequest = new CounterServiceIncrementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceIncrementResponse$Type extends MessageType<CounterServiceIncrementResponse> {
    constructor() {
        super("counter.v1.CounterServiceIncrementResponse", [
            { no: 1, name: "event", kind: "message", T: () => Event },
            { no: 2, name: "counter", kind: "message", T: () => Counter }
        ]);
    }
    create(value?: PartialMessage<CounterServiceIncrementResponse>): CounterServiceIncrementResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CounterServiceIncrementResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceIncrementResponse): CounterServiceIncrementResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* event.v1.Event event */ 1:
                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                case /* counter.v1.Counter counter */ 2:
                    message.counter = Counter.internalBinaryRead(reader, reader.uint32(), options, message.counter);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceIncrementResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* event.v1.Event event = 1; */
        if (message.event)
            Event.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* counter.v1.Counter counter = 2; */
        if (message.counter)
            Counter.internalBinaryWrite(message.counter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceIncrementResponse
 */
export const CounterServiceIncrementResponse = new CounterServiceIncrementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceDeleteRequest$Type extends MessageType<CounterServiceDeleteRequest> {
    constructor() {
        super("counter.v1.CounterServiceDeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CounterServiceDeleteRequest>): CounterServiceDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CounterServiceDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceDeleteRequest): CounterServiceDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceDeleteRequest
 */
export const CounterServiceDeleteRequest = new CounterServiceDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CounterServiceDeleteResponse$Type extends MessageType<CounterServiceDeleteResponse> {
    constructor() {
        super("counter.v1.CounterServiceDeleteResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CounterServiceDeleteResponse>): CounterServiceDeleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<CounterServiceDeleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CounterServiceDeleteResponse): CounterServiceDeleteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CounterServiceDeleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message counter.v1.CounterServiceDeleteResponse
 */
export const CounterServiceDeleteResponse = new CounterServiceDeleteResponse$Type();
/**
 * @generated ServiceType for protobuf service counter.v1.CounterService
 */
export const CounterService = new ServiceType("counter.v1.CounterService", [
    { name: "Create", options: {}, I: CounterServiceCreateRequest, O: CounterServiceCreateResponse },
    { name: "Get", options: {}, I: CounterServiceGetRequest, O: CounterServiceGetResponse },
    { name: "List", options: {}, I: CounterServiceListRequest, O: CounterServiceListResponse },
    { name: "Increment", options: {}, I: CounterServiceIncrementRequest, O: CounterServiceIncrementResponse },
    { name: "Delete", options: {}, I: CounterServiceDeleteRequest, O: CounterServiceDeleteResponse }
]);
